plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = archivesBaseName + "-FORGE"

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    forge {
        mixinConfigs "fabric-command-api-v1.mixins.json", "jsmacros-forge.mixins.json"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    shadowCommon "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    shadowCommon "org.graalvm.js:js:${project.graal_version}", {
        exclude module: "icu4j"
    }
    shadowCommon "org.graalvm.truffle:truffle-api:${project.graal_version}"
    shadowCommon "org.graalvm.regex:regex:${project.graal_version}"
//		include "org.graalvm.compiler:compiler:${project.graal_version}"
//		include "org.graalvm.compiler:compiler-management:${project.graal_version}"
    shadowCommon "io.noties:prism4j:${project.prism_version}"
    shadowCommon "com.neovisionaries:nv-websocket-client:2.10"
    shadowCommon "org.javassist:javassist:3.28.0-GA"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    dependencies {
        exclude(dependency {
            it.moduleGroup == 'org.intellij'
        })
        exclude(dependency {
            it.moduleGroup == 'org.jetbrains'
        })
    }
    classifier "dev-shadow"

    mergeServiceFiles()
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"

    manifest {
        attributes([
                'MixinConnector': 'xyz.wagyourtail.jsmacros.forge.client.JsMacrosEarlyRiser',
                'JsMacrosDeps': configurations.include.files.collect { it.name }.join(" ")
        ])
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

task createDist(type: Copy) {
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)