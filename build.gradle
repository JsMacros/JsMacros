import groovy.json.JsonSlurper

plugins {
    id "xyz.wagyourtail.unimined"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = project.archives_base_name
}

java {
    sourceCompatibility = JavaVersion.values()[project.java_version.toInteger() - 1]
    targetCompatibility = JavaVersion.values()[project.java_version.toInteger() - 1]
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name "fabricmc repository"
        url 'https://maven.fabricmc.net/'
    }
    maven {
        name "modmenu repository"
        url 'https://maven.terraformersmc.com/releases/'
    }
    maven {
        name "forge repository"
        url 'https://files.minecraftforge.net/maven/'
    }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.neoforged.net/releases' }
    mavenCentral()
}

configurations {
    implementation {
        canBeResolved = true
    }
    jsmacrosExtensionInclude
    shadowForge
}

sourceSets {
    core {
        java {
            srcDir "common/src/core/java"
        }
        resources {
            srcDir "common/src/core/resources"
        }
        compileClasspath += configurations.implementation
        runtimeClasspath += configurations.implementation
    }
    main {
        java {
            srcDir "common/src/main/java"
        }
        resources {
            srcDir "common/src/main/resources"
        }
        compileClasspath += core.output + core.compileClasspath
        runtimeClasspath += core.output + core.runtimeClasspath
    }
    if (enabled_loaders.contains("forge")) {
        forge {
            compileClasspath += core.output + core.compileClasspath + main.output + configurations.implementation
            runtimeClasspath += core.output + core.runtimeClasspath + main.output + configurations.implementation
        }
    }
    if (enabled_loaders.contains("fabric")) {
        fabric {
            compileClasspath += core.output + core.compileClasspath + main.output + configurations.implementation
            runtimeClasspath += core.output + core.runtimeClasspath + main.output + configurations.implementation
        }
    }
}

unimined.useGlobalCache = false

unimined.minecraft {
    version project.minecraft_version

    mappings {
        intermediary()
        yarn project.yarn_mappings

        devFallbackNamespace "intermediary"
    }

    if (sourceSet == sourceSets.main) {
        defaultRemapJar = false
        runs.off = true
    }
}

sourceSets {
    core {
        compileClasspath += configurations.minecraftLibraries
        runtimeClasspath += configurations.minecraftLibraries
    }
}


if (enabled_loaders.contains("forge")) {

    unimined.minecraft(sourceSets.forge) {
        combineWith(sourceSets.main)

        minecraftRemapper.config {
            ignoreConflicts(true)
        }

        minecraftForge {
            loader project.forge_version

            mixinConfig = ["jsmacros-forge.mixins.json", "jsmacros.mixins.json", "fabric-command-api-v1.mixins.json"]
        }
    }

}

if (enabled_loaders.contains("fabric")) {

    unimined.minecraft(sourceSets.fabric) {
        combineWith(sourceSets.main)

        fabric {
            loader project.fabric_loader_version
        }
    }

}

dependencies {
    implementation "io.noties:prism4j:${project.prism_version}"
    compileOnly "org.spongepowered:mixin:0.8.5"
    implementation "org.ow2.asm:asm:9.3"

    forgeMinecraftLibraries "org.spongepowered:mixin:0.8.5"

    coreImplementation "org.jooq:joor:0.9.14"
    coreImplementation "com.neovisionaries:nv-websocket-client:2.10"
    coreImplementation "org.javassist:javassist:3.28.0-GA"

    jsmacrosExtensionInclude(project(":javascript_extension")) { transitive = false }

    if (enabled_loaders.contains("fabric")) {

        fabricModImplementation fabricApi.fabricModule("fabric-api-base", project.fapi_version)
        fabricModImplementation fabricApi.fabricModule("fabric-lifecycle-events-v1", project.fapi_version)
        fabricModImplementation fabricApi.fabricModule("fabric-key-binding-api-v1", project.fapi_version)
        fabricModImplementation fabricApi.fabricModule("fabric-resource-loader-v0", project.fapi_version)
        fabricModImplementation fabricApi.fabricModule("fabric-command-api-v1", project.fapi_version)

        fabricInclude fabricApi.fabricModule("fabric-api-base", project.fapi_version)
        fabricInclude fabricApi.fabricModule("fabric-lifecycle-events-v1", project.fapi_version)
        fabricInclude fabricApi.fabricModule("fabric-key-binding-api-v1", project.fapi_version)
        fabricInclude fabricApi.fabricModule("fabric-resource-loader-v0", project.fapi_version)
        fabricInclude fabricApi.fabricModule("fabric-command-api-v1", project.fapi_version)

        fabricInclude "io.noties:prism4j:${project.prism_version}"
        fabricInclude "com.neovisionaries:nv-websocket-client:2.10"
        fabricInclude "org.javassist:javassist:3.28.0-GA"
        fabricInclude "org.jooq:joor:0.9.14"

        fabricModImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
        fabricModImplementation fabricApi.fabricModule("fabric-screen-api-v1", project.fapi_version)

        fabricRuntimeOnly(project(":javascript_extension")) { transitive = false }
        fabricRuntimeOnly "org.graalvm.sdk:graal-sdk:${project.graal_version}"
        fabricRuntimeOnly "org.graalvm.js:js:${project.graal_version}"
        fabricRuntimeOnly "org.graalvm.truffle:truffle-api:${project.graal_version}"
        fabricRuntimeOnly "org.graalvm.regex:regex:${project.graal_version}"

    }

    if (enabled_loaders.contains("forge")) {

        shadowForge "io.noties:prism4j:${project.prism_version}", {
            exclude module: "annotations-java5"
        }
        shadowForge "com.neovisionaries:nv-websocket-client:2.10"
        shadowForge "org.javassist:javassist:3.28.0-GA"
        shadowForge "org.jooq:joor:0.9.14"


        forgeRuntimeOnly(project(":javascript_extension")) { transitive = false }
        forgeRuntimeOnly "org.graalvm.sdk:graal-sdk:${project.graal_version}"
        forgeRuntimeOnly "org.graalvm.js:js:${project.graal_version}"
        forgeRuntimeOnly "org.graalvm.truffle:truffle-api:${project.graal_version}"
        forgeRuntimeOnly "org.graalvm.regex:regex:${project.graal_version}"

    }
}

tasks.register('removeDist', Delete) {
    delete new File(rootProject.rootDir, "dist")
}

clean.finalizedBy(removeDist)

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"

    var javaVersion = project.java_version.toInteger()
    if (JavaVersion.current().isJava9Compatible()) {
        options.release.set javaVersion
    }
}

jar {
    enabled = false
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

if (enabled_loaders.contains("forge")) {
    processForgeResources {
        inputs.property "version", project.version

        filesMatching("META-INF/mods.toml") {
            expand "version": project.version
        }

        filesMatching("jsmacros.extension.json") {
            expand "dependencies": configurations.jsmacrosExtensionInclude.files.collect { it.name }.join(" ")
        }
    }


    forgeJar {
        dependsOn(":javascript_extension:jar")
        archiveClassifier = "forge-dev"
        from sourceSets.forge.output, sourceSets.main.output, sourceSets.core.output

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    task shadowForgeJar(type: ShadowJar) {
        archiveClassifier = "forge-dev-shadow"
        from(forgeJar)

        // exclude icu that's "accidentally" (I hope) included in graaljs jar
        exclude "com/ibm/**"

        mergeServiceFiles()

        configurations = [project.configurations.shadowForge]
}

    remapForgeJar {
        dependsOn(shadowForgeJar)
        inputFile = shadowForgeJar.archiveFile.get().asFile

        from(configurations.jsmacrosExtensionInclude.files) {
            include '*'
            into "META-INF/jsmacrosdeps"
        }

        manifest {
            attributes([
                    'MixinConnector': 'xyz.wagyourtail.jsmacros.forge.client.JsMacrosEarlyRiser',
            ])
        }

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

if (enabled_loaders.contains("fabric")) {
    processFabricResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }

        filesMatching("jsmacros.extension.json") {
            expand "dependencies": configurations.jsmacrosExtensionInclude.files.collect { it.name }.join(" ")
        }
    }

    fabricJar {
        dependsOn(":javascript_extension:jar")
        from sourceSets.fabric.output, sourceSets.main.output, sourceSets.core.output

        preserveFileTimestamps = false
        reproducibleFileOrder = true

        duplicatesStrategy DuplicatesStrategy.EXCLUDE

        from(configurations.jsmacrosExtensionInclude.files) {
            include '*'
            into "META-INF/jsmacrosdeps"
        }
    }

    remapFabricJar {

        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

task generatePyDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the python documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath + sourceSets.core.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/python/JsMacrosAC/")
    options.doclet = "xyz.wagyourtail.doclet.pydoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
}

task copyPyDoc(type: Copy, dependsOn: generatePyDoc) {
    group = "documentation"
    description = "Copies the python documentation to the build folder"
    from new File(rootProject.rootDir, "docs/python")
    into new File(rootProject.buildDir, "docs/python")
}

task generateTSDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the typescript documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath + sourceSets.core.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/typescript/headers/")
    options.doclet = "xyz.wagyourtail.doclet.tsdoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
}

task copyTSEnv(type: Copy, dependsOn: generateTSDoc) {
    group = "documentation"
    description = "Copies the typescript files to the build folder"
    from new File(rootProject.rootDir, "docs/typescript")
    into new File(rootProject.buildDir, "docs/typescript")
}

task generateWebDoc(type: Javadoc) {
    group = "documentation"
    description = "Generates the web documentation for the project"
    source = sourceSets.main.allJava + sourceSets.core.allJava
    doFirst {
        classpath = sourceSets.main.compileClasspath + sourceSets.core.compileClasspath
    }
    destinationDir = new File(rootProject.buildDir, "docs/web/")
    options.doclet = "xyz.wagyourtail.doclet.webdoclet.Main"
    options.docletpath new File(rootProject.rootDir, "buildSrc/build/libs/buildSrc.jar")
    options.addStringOption "v", version
    options.addStringOption "mcv", rootProject.minecraft_version
    options {
        links 'https://docs.oracle.com/javase/8/docs/api/', 'https://www.javadoc.io/doc/org.slf4j/slf4j-api/1.7.30/', 'https://javadoc.io/doc/com.neovisionaries/nv-websocket-client/latest/'
    }
}

task copyWebDoc(type: Copy, dependsOn: generateWebDoc) {
    group = "documentation"
    description = "Copies the web documentation to the build folder"
    from new File(rootProject.rootDir, "docs/web")
    into new File(rootProject.buildDir, "docs/web")

    inputs.property "version", project.version

    filesMatching("index.html") {
        expand "version": project.version
    }
}

task createDist(type: Copy) {
    group = "build"
    description = "Creates all files for the distribution of the project"
    dependsOn copyPyDoc, copyTSEnv, copyWebDoc
    from(new File(rootProject.buildDir, "docs"))
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)