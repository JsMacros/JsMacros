# This is a basic workflow to help you get started with Actions

name: Build Beta

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: push

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      
    - uses: actions/github-script@v2
      id: fname
      with:
        result-encoding: string
        script: |
          const fs = require("fs");
          let file = fs.readFileSync("./gradle.properties");
          file = file.toString().split("\n").map(e => e.trim().startsWith("mod_version") ? `${e}-beta-${process.env.GITHUB_SHA.substring(0, 7)}` : e).join("\n");
          fs.writeFileSync("./gradle.properties", file);
          const mod_version = file.toString().split("\n").filter(e => e.trim().startsWith("mod_version"))[0].split("=")[1].trim();
          const archives_base_name = file.toString().split("\n").filter(e => e.trim().startsWith("archives_base_name"))[0].split("=")[1].trim();
          return `${archives_base_name}-${mod_version}`;
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
       distribution: 'adopt'
       java-version: '17'
       cache: 'gradle'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Create NPM types
      uses: actions/github-script@v6
      with: 
        script: |
          const { execSync } = require("child_process");
          const fs = require("fs");
          const paths = { tsHeaders: "./dist/typescript/headers", npmTypes: "./npm", dist: "./dist" };
          const packageJson = { "name": "@types/jsmacros", "version": undefined, "description": "TypeScript definitions for JsMacros", "license": "MPL 2.0", "author": "wagyourtail", "main": "", "types": undefined, "scripts": {}, "dependencies": {}, "tsName": undefined };
          let files = fs.readdirSync(paths.tsHeaders);
          let typesFile = files.filter(name => !name.startsWith("Graal")).at(0);
          let version = typesFile.replace(".d.ts", "").split("-").slice(1).join("-");
          packageJson.version = version;
          packageJson.types = typesFile;
          packageJson.tsName = typesFile;
          !fs.existsSync(paths.npmTypes) ? fs.mkdirSync(paths.npmTypes) : null;
          fs.writeFileSync(`${paths.npmTypes}/package.json`, JSON.stringify(packageJson, null, "\t"));
          files.forEach((file) => fs.copyFileSync(`${paths.tsHeaders}/${file}`, `${paths.npmTypes}/${file}`));
          execSync("npm pack", { cwd: paths.npmTypes });
          await io.mv(`${paths.npmTypes}/types-${typesFile.replace(".d.ts", "").toLowerCase()}.tgz`, `${paths.dist}/types-${typesFile.replace(".d.ts", "").toLowerCase()}.tgz`);
          
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.fname.outputs.result }}
        path: ./dist/**/*
